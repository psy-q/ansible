---
- name: Install packages for rbenv
  apt: pkg={{ item }} state=present
  with_items:
    - git
    - libreadline-dev
    - libreadline6-dev
    - libssl-dev
    - libxslt1-dev
    - libxml2-dev
    - build-essential
    - zlib1g-dev
    - sudo

- name: Install a JRE if jRuby needs to be installed
  apt: pkg=openjdk-7-jre state=present
  when: ruby_version[:5] == "jruby"

- name: Make sure {{ ruby_user }} exists and uses bash
  user: name={{ ruby_user }} shell=/bin/bash state=present

- name: Register rbenv_root
  sudo: True
  sudo_user: "{{ ruby_user }}"
  #shell: echo {{ ansible_env.HOME }}/.rbenv
  shell: echo $HOME/.rbenv
  register: rbenv_root

- name: Allow {{ ruby_user }} to sudo anything due to the nature of rbenv
  lineinfile: "dest=/etc/sudoers state=present regexp='^{{ ruby_user }}' line='{{ ruby_user }} ALL=(ALL) NOPASSWD: ALL'"

- name: Check if rbenv is installed
  sudo: True
  sudo_user: "{{ ruby_user }}"
  command: chdir={{ rbenv_root.stdout }} bash -l -c "RBENV_ROOT={{ rbenv_root.stdout }} rbenv --version"
  register: rbenv_is_installed
  ignore_errors: True

- name: Install rbenv locally for {{ ruby_user }}
  git: repo=https://github.com/sstephenson/rbenv.git dest={{ rbenv_root.stdout }}
  sudo: True
  sudo_user: "{{ ruby_user }}"
  register: rbenv_has_been_installed
  when: rbenv_is_installed|failed

- name: Install ruby-build so you can install Rubies through rbenv
  sudo: True
  sudo_user: "{{ ruby_user }}"
  git: repo=https://github.com/sstephenson/ruby-build.git dest={{ rbenv_root.stdout }}/plugins/ruby-build
  when: rbenv_is_installed|failed

- name: Install rbenv .profile snippet for user {{ ruby_user }} (1/2)
  sudo: True
  sudo_user: "{{ ruby_user }}"
  lineinfile:
    dest: ~/.profile
    state: present
    regexp: "export PATH=.*rbenv.*"
    line: "export PATH=\"{{ rbenv_root.stdout }}/bin:$PATH\""
    create: yes
  when: rbenv_is_installed|failed

- name: Install rbenv .profile snippet for user {{ ruby_user }} (2/2)
  sudo: True
  sudo_user: "{{ ruby_user }}"
  lineinfile:
    dest: ~/.profile
    state: present
    regexp: ^eval.*rbenv init.*
    line: eval "$(rbenv init -)"
    insertafter: "^export PATH=.*rbenv.*"
    create: yes
  when: rbenv_is_installed|failed

- name: "rbenv: Check if Ruby {{ ruby_version }} is installed for user {{ ruby_user }}"
  sudo: True
  sudo_user: "{{ ruby_user }}"
  command: chdir={{ rbenv_root.stdout }} bash -l -c 'RBENV_ROOT={{ rbenv_root.stdout }} rbenv versions | grep {{ ruby_version }}'
  register: ruby_is_installed
  ignore_errors: True

- name: "rbenv: Install rbenv Ruby {{ ruby_version }} for user {{ ruby_user }}"
  sudo: True
  sudo_user: "{{ ruby_user }}"
  command: chdir={{ rbenv_root.stdout }} executable=/bin/bash bash -l -c 'RBENV_ROOT={{ rbenv_root.stdout }} rbenv install {{ ruby_version }}'
  when: (rbenv_is_installed|success or rbenv_has_been_installed|success) and ruby_is_installed|failed
  register: ruby_has_been_installed

- name: "rbenv: Check if Ruby {{ ruby_version }} user {{ ruby_user }} has Bundler"
  sudo: True
  sudo_user: "{{ ruby_user }}"
  command: chdir={{ rbenv_root.stdout }} executable=/bin/bash bash -l -c 'RBENV_ROOT={{ rbenv_root.stdout }} rbenv shell {{ ruby_version }} && rbenv rehash && gem list bundler | grep bundler'
  when: (rbenv_is_installed|success or rbenv_has_been_installed|success) and (ruby_is_installed|success or ruby_has_been_installed|success)
  register: bundler_is_installed
  ignore_errors: True

- name: "rbenv: Install bundler for Ruby {{ ruby_version }} of user {{ ruby_user }}"
  sudo: True
  sudo_user: "{{ ruby_user }}"
  command: chdir={{ rbenv_root.stdout }} executable=/bin/bash bash -l -c 'RBENV_ROOT={{ rbenv_root.stdout }} rbenv shell {{ ruby_version }} && rbenv rehash && gem install bundler'
  when: bundler_is_installed|failed

- name: "rbenv: Set default ruby for {{ ruby_user }} to {{ ruby_version }}"
  sudo: True
  sudo_user: "{{ ruby_user }}"
  command: chdir={{ rbenv_root.stdout }} executable=/bin/bash bash -l -c 'RBENV_ROOT={{ rbenv_root.stdout }} rbenv global {{ ruby_version }}'
  when: set_default
